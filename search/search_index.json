{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A set of tools for writing fiction with Visual Studio Code . Get it from: Visual Studio Code Marketplace Important! This extension is in early development(concept) phase. Use only for testing purposes. Main Features \u00b6 Enhanced text editing : automatically insert new paragraph on Enter , or Shift + Enter solutions for writing dialogue using dialogue markers (like in some non-english languages), using either em-dash (\u2014) or other marks. autoreplace -- with \u2014 status bar quick action ... Format document clean up extra spaces clean up extra lines fix dialogue markers, indents fix paragraph spacing fix line spacing ... Export/Combine files combine multiple .md files into one single file. export .md to other formats (like .doc or .docx ) uses pandoc ... Analyze text count words, phrases, word repetitions view document statistics ... View fold paragraph lines tag files (view badges in file explorer) writing mode (different theme, different font size) text highlighting typewriter mode ... Installation \u00b6 More information: Browse for extensions GitHub \u00b6 tbd","title":"Overview"},{"location":"#main-features","text":"Enhanced text editing : automatically insert new paragraph on Enter , or Shift + Enter solutions for writing dialogue using dialogue markers (like in some non-english languages), using either em-dash (\u2014) or other marks. autoreplace -- with \u2014 status bar quick action ... Format document clean up extra spaces clean up extra lines fix dialogue markers, indents fix paragraph spacing fix line spacing ... Export/Combine files combine multiple .md files into one single file. export .md to other formats (like .doc or .docx ) uses pandoc ... Analyze text count words, phrases, word repetitions view document statistics ... View fold paragraph lines tag files (view badges in file explorer) writing mode (different theme, different font size) text highlighting typewriter mode ...","title":"Main Features"},{"location":"#installation","text":"More information: Browse for extensions","title":"Installation"},{"location":"#github","text":"tbd","title":"GitHub"},{"location":"changelog/","text":"0.0.23 - alpha23 \u00b6 Adds: Writing mode Reorganizes settings (breaking change) 0.0.21 - alpha21 \u00b6 Adds: View: Highlight dialogue markers View: Highlight quoted dialogue View: File Tags - add small 2 letter badges to files form current directory markdown-fiction-writer.view.fileTags Major Refactorings to Disposable usage Removes: markdown-fiction-writer.format.backupBeforeEachFormat setting. It always asks before performing formatting. 0.0.17 - alpha17 \u00b6 Export: Add SaveAs dialogue to export commands. Export: Add option to always show SaveAs dialgoue Export: Add option to change TOC filename Export: Show OpenFileDialogue when use template is enabled 0.0.11 - alpha11 \u00b6 add writing statistics (word count, etc) 0.0.6 - alpha6 \u00b6 add text analysis (word frequency count) 0.0.3 - alpha3 \u00b6 add status bar buttons folding, unfolding of paragraph lines more support for one-sentence-per line 0.0.2 - alpha2 \u00b6 add text formatting options add include .md file support using {file.md} syntax add syntax highlighting for included file 0.0.1 - alpha1 \u00b6 add compile/export using pandoc supporting em-dash (\u2014) dialogue markers new paragraph on Shift + Enter support for one-sentence-per line Known issues \u00b6 As this plugin rebinds some keys, like: enter , shift + enter , delete , tab , backspace , it can interfere with other extensions that also overwrite this key bindings. Consider inspecting and rebinding some of them, as described here: Key Bindings for Visual Studio Code","title":"Changelog"},{"location":"changelog/#0023-alpha23","text":"Adds: Writing mode Reorganizes settings (breaking change)","title":"0.0.23 - alpha23"},{"location":"changelog/#0021-alpha21","text":"Adds: View: Highlight dialogue markers View: Highlight quoted dialogue View: File Tags - add small 2 letter badges to files form current directory markdown-fiction-writer.view.fileTags Major Refactorings to Disposable usage Removes: markdown-fiction-writer.format.backupBeforeEachFormat setting. It always asks before performing formatting.","title":"0.0.21 - alpha21"},{"location":"changelog/#0017-alpha17","text":"Export: Add SaveAs dialogue to export commands. Export: Add option to always show SaveAs dialgoue Export: Add option to change TOC filename Export: Show OpenFileDialogue when use template is enabled","title":"0.0.17 - alpha17"},{"location":"changelog/#0011-alpha11","text":"add writing statistics (word count, etc)","title":"0.0.11 - alpha11"},{"location":"changelog/#006-alpha6","text":"add text analysis (word frequency count)","title":"0.0.6 - alpha6"},{"location":"changelog/#003-alpha3","text":"add status bar buttons folding, unfolding of paragraph lines more support for one-sentence-per line","title":"0.0.3 - alpha3"},{"location":"changelog/#002-alpha2","text":"add text formatting options add include .md file support using {file.md} syntax add syntax highlighting for included file","title":"0.0.2 - alpha2"},{"location":"changelog/#001-alpha1","text":"add compile/export using pandoc supporting em-dash (\u2014) dialogue markers new paragraph on Shift + Enter support for one-sentence-per line","title":"0.0.1 - alpha1"},{"location":"changelog/#known-issues","text":"As this plugin rebinds some keys, like: enter , shift + enter , delete , tab , backspace , it can interfere with other extensions that also overwrite this key bindings. Consider inspecting and rebinding some of them, as described here: Key Bindings for Visual Studio Code","title":"Known issues"},{"location":"features/","text":"Text Editing \u00b6 Disable Key-bindings \u00b6 markdown-fiction-writer.edit.disableKeybindings Disables the following keybindings added by this extension: - Enter , Shift + Enter , Del , Backspace , Tab ) Note: If disabled , some of the other features, that depend or ar triggered by this keybindings will be disabled (eg. easy Paragraph Creation needs Enter end Shift + Enter in order to work properly). Easy Paragraph Creation \u00b6 markdown-fiction-writer.edit.easyParagraphCreation To create paragraphs in markdown, you need to add an extra empty line. That, usually, means pressing Enter key twice. With this setting, you can easily create new paragraphs by hitting one key only (or a combination). It has two options: Enter : pressing Enter once will add two line-breaks, and pressing Shift + Enter will add one line-break. Shift+Enter : pressing Enter once will add one line-break, but Shift + Enter will add two line-breaks. Writing Dialogues \u00b6 This is a proposed solution for writing dialogue. In some languages, dialogue is not marked by quotation marks, but is marked only at the beginning a dialogue line. For example, each line can start with em-dash (\u2014), like so: The Time Machine, by H. G. Wells \u2014 You mean to say that that machine has travelled into the future? said Filby. \u2014 Into the future or the past. I don\u2019t, for certain, know which. After an interval the Psychologist had an inspiration. \u2014 It must have gone into the past if it has gone anywhere, he said. Markdown can convert three dashes to em-dash and two dashes to en-dash. However, typing three dash character and one space is not necessarly convenient when writing lots of dialogue lines. A widespread practice is to write -- for an em-dash , and the text editor will automatically replace it. Selecting dialogue punctuation: \u00b6 markdown-fiction-writer.editDialogue.marker \"Hello,\" (quotes) default \u2014 Hello, (em-dash followed by one space) -- Hello , (two dashes followed by one space) --- Hello, (three dashes followed by one space) \u2014Hello, (em-dash, no space) --Hello, (two dashes, no space) ---Hello, (three dashes, no space With this feature, you can controlsthe punctuation used when writing dialogue. The following options are possible: Quotes: \"Hello,\" John said. ( default : this is equivalent with disabling all proposed dialogue features) Em-dash followed by one space: \u2014 Hello, John said. Two dashes followed by one space: -- Hello, John said. Three dashes followed by one space: --- Hello, John said. Em-dash, no space: \u2014Hello, John said. Two dashes, no space: -- Hello, John said. Three dashes, no space: --- Hello, John said. Once a dialogue marker is selected (other than quotes), the paragraph starting with that marker will be recognized as a dialogue paragraph enabeling other dialogue related features, like text formatting, auto replace, etc. Auto-replace dialogue markers \u00b6 markdown-fiction-writer.editDialogue.markerAutoReplace If enabled, typing -- followed by a space will insert the selected marker. Disable this feature if you do not want to auto-replace markers. Easily create new dialogue paragraphs \u00b6 Selecting a dialogue marker (other than quotes) changes the Easy Paragraph Creation behaviour as follows: if new paragraph is created (either by Shift + Enter or by Enter ), and is from a dialogue paragraph (meaning, the paragraph starts with a marker), then the next paragraph will automatically start with the selected dialogue marker. This makes writing alternative dialogue lines much faster. when hitting new line, if the only thing on that line is a dialogue marker, is automatically deleted. when hitting backspace, and the only thing in front of the cursor is the dialogue marker, the line will be cleared Using Dialgoue indents: \u00b6 Indent for sequential lines of the same dialogue paragraph. ( 0 for no indenting) This is especially useful when using the one sentence per line technique. Thus, having sentences from the same dialogue separated by simple line-breaks. -- Hi, said the first dialogue line. I am here, on multiple lines. -- Hi, said the other dialogue line. I am also here. The two lines continued their chat. markdown-fiction-writer.editDialogue.sentenceIndent The indent can be manually set under Edit Dialouge - Sentence Indent . markdown-fiction-writer.editDialogue.sentenceIndentAutoDetect If Edit Dialogue: Sentence Indent Auto-Detect is enabled, the indent will be automatically calculated based on the selected dialogue marker, and the previous setting will be ignored. Example: -- Hi, this is a dialogue. It uses two dashes and one space. Thus, it has a 3 space indent. \u2014 Hi, this uses em-dash and one space. It has just a two space indent. Formatting \u00b6 Enable Document Formatting \u00b6 markdown-fiction-writer.textFormatting.enabled Enables all document formatting features. Experimental This is an experimental feature. It works by changing text in your document. Make sure you make a backup of your document before enabling this, or use is on drafts and test documents only. Remove extra spaces \u00b6 markdown-fiction-writer.textFormatting.removeExtraSpaces Removes multiple spaces (not at beginning or ending of lines), with one space. Before This is a text with a lot , of spaces. On multiple lines . Indents are not removed ! After This is a text with a lot, of spaces. On multiple lines. Indents are not removed! Remove Trailing Spaces \u00b6 markdown-fiction-writer.textFormatting.removeTrailingSpaces Removes all whitespace characters from line ends. Before This is a text. Having too much space at the end of each line. After This is a text. Having too much space at the end of each line. Fix Paragraph Breaks \u00b6 markdown-fiction-writer.textFormatting.fixParagraphBreaks none default Soft line-breaks As New Paragraph Soft line-breaks In Same Paragraph One Sentence Per Line Converts soft and hard breaks, depending on the selected behaviour: Soft line-breaks As New Paragraph \u00b6 combines soft breaks from same paragraph into one line. (joins multi-line paragraphs) Before This is a line with a soft linebreak. This is a new paragraph. With another line break. And another line break After This is a line with a soft linebreak. This is a new paragraph. With another line break. And another line break Soft line-breaks In Same Paragraph \u00b6 Converts soft line-breaks to hard line-breaks. The result is having an extra empty before each soft break. (multiple paragraphs) Before This is a line with a soft linebreak. This is a new paragraph. With another line break. And another line break After This is a line with a soft linebreak. This is a new paragraph. With another line break. And another line break One Sentence Per Line \u00b6 This is a technique used by some writers. It consists of writing each sentence from the same paragraph on a new line. Paragraphs are still marked with an empty line. If enabled, this setting does the following: - Splits each line in sentences (using the boundary characters: . ! ? ; : ) - Adds every sentence on a new line. - Keeps spacing between paragraphs. Before # Using one sentence per line This means, each sentence. If in the same paragraph. Uses a soft line break. Already separated sentences, will remain as they are. Paragraph breaks are also kept. This is it. After # Using one sentence per line This means, each sentence. If in the same paragraph. Uses a soft line break. Already separated sentences, will remain as they are. Paragraph breaks are also kept. This is it. Fix Paragraph Spacing \u00b6 markdown-fiction-writer.textFormatting.fixParagraphSpacing Normalizes space between different paragraph types (header, body, dialogue, ...) by adding a new line if needed. Before # This is a header And this is a first line. The second sentence is this. Then, a lot of empty lines here. ## This can be another header And a lot here. *** After # This is a header And this is a first line. The second sentence is this. Then, a lot of empty lines here. ## This can be another header And a lot here. *** Remove Extra Lines \u00b6 markdown-fiction-writer.textFormatting.removeExtraLines Reduces multiple empty lines (more than two), to a single empty line. Before And this is a first line. The second sentence is this. Then, a lot of empty lines here. And a lot here. *** After And this is a first line. The second sentence is this. Then, a lot of empty lines here. And a lot here. *** Fix Mismatch Dialogue Markers \u00b6 markdown-fiction-writer.textFormatting.fixMismatchDialogueMarkers If the currently selected dialogue marker is not quotes, then it replaces all known dialogue markers (not quotes) with the selected one. Before -- This text has mixed dialogue markers. --Some are without space. --- Yes, it has quite a lot. \u2014 It can be fixed. After \u2014 This text has mixed dialogue markers. \u2014 Some are without space. \u2014 Yes, it has quite a lot. \u2014 It can be fixed. Fix Dialogue Indents \u00b6 markdown-fiction-writer.textFormatting.fixDialogueIndents Replaces all dialogue indents (visible if one sentence per line technique is used) with the currently selected dialogue indent. This works only if markdown-fiction-writer.editDialogue.marker is not quotes , and markdown-fiction-writer.editDialogue.sentenceIndent is greater than 0, or markdown-fiction-writer.editDialogue.sentenceIndentAutoDetect is enabled Before This text has mixed dialogue indents. -- Sentences for same dialogue. Start at different indents. -- Yes, this can be quite annoing sometimes. Some start too early. And some start too late. Of course, normal paragraphs are left untouched. After This text has mixed dialogue indents. -- Sentences for same dialogue. Start at different indents. -- Yes, this can be quite annoing sometimes. Some start too early. And some start too late. Of course, normal paragraphs are left untouched. Exporting \u00b6 Requirements \u00b6 Important! This feature requires Pandoc . If you want to also compile .md to other document formats using this extension, you need to have Pandoc installed on your machine, and configured to run from command line! Pandoc is a universal document converter, that understands a large number of useful markdown syntax extensions, including document metadata (title, author, date); footnotes; tables; etc. You can get it from here: Installing pandoc . You can test that pandoc is properly installed by opening your prefered command-line app and running: pandoc --version You should get an output similar to: pandoc 2.11.4 Compiled with pandoc-types 1.22, texmath 0.12.1, skylighting 0.10.2, citeproc 0.3.0.5, ipynb 0.1.0.1 User data directory: C:\\Users\\YourUserName\\AppData\\Roaming\\pandoc Copyright (C) 2006-2021 John MacFarlane. Web: https://pandoc.org This is free software; see the source for copying conditions. There is no warranty, not even for merchantability or fitness for a particular purpose. Including other documents \u00b6 This extension adds support for combining multiple markdown documents into one. You can use the following syntax {your_file.md} from the markdown document you want to export, and this extension will include the contents of your_file.md in the exported document. A common practice is to have just one TOC document, where you include all other documents. A simple toc.md document can look like this: {chapter01.md} {chapter02.md} {chapter03.md} {chapter04.md} This will include all 4 referenced files. Of course a TOC document can contain any additional markdown syntax: # My Book Title ## Preface Some opening words ## Chapter One {chapter01.md} ## Chapter Tso {chapter02.md} ## The End This is the end. If {chapter01.md} does not exist, you will get a warning message, but the exporting will still continue with the other documents. The path to included file needs to be relative to the document they are reference from. For example, the toc.md from the following directory: . \u251c\u2500 toc.md \u251c\u2500 prologue.md \u251c\u2500 part1 \u2502 \u251c\u2500 ch1.md \u2502 \u251c\u2500 ch2.md \u2502 \u2514\u2500 ch3.md \u251c\u2500 part2/ \u2502 \u251c\u2500 ch4.md/ \u2502 \u2514\u2500 ch5.md \u2514\u2500 epilogue.md could look like: {prologue.md} {part1\\ch1.md} {part1\\ch2.md} {part1\\ch3.md} {part2\\ch4.md} {part2\\ch5.md} {epilogue.md} Commands \u00b6 Compile Current File \u00b6 [TBD] Compile Selected files \u00b6 Compiles all selected markdown documents (having .md extension) from current directory, into one file. The include order is filename order. [TBD] Compile TOC \u00b6 Exports the TOC file. A TOC file is a simple .md file that serves as a table of contents for exporting. The file-name can be configured under markdown-fiction-writer.export.tocFilename . By default, the toc.md file-name will be used. If the TOC file is searched for in two locations: first, in the same folder as the opened document second, in the workspace root. If no TOC files is found in either location, then compile will fail. Example: . \u251c\u2500 toc.md # The toc.md in workspace root \u251c\u2500 part1 \u2502 \u251c\u2500 chapter1.md \u2502 \u251c\u2500 chapter2.md \u2502 \u2514\u2500 toc.md # The toc.md from part.1 \u251c\u2500 part2/ \u2502 \u251c\u2500 chapter3.md/ \u2502 \u2514\u2500 chapter4.md if chapter1.md is opened, and Compile toc.md command is run, then /part1/toc.md will be used. if chapter4.md is opened, and Compile toc.md command is run, then /toc.md from workspace root will be used. View \u00b6 Typewriter Mode \u00b6 [TBD] File Tags \u00b6 Settings markdown-fiction-writer.view.fileTags markdown-fiction-writer.view.fileTagsEnabled Ability to add tags to files. Each file will display the corresponding badge (1 or 2 letter word) in file explorer: Go to: markdown-fiction-writer.view.fileTags Add a few tags (eg. draft = D , and rev1 = R1 ) Then open any .md file, and add // draft or // rev1 on the first line . if the tag line is not on the first line of the file, the tag will be ignored Save the document. You should see D or R1 as a badge in file explorer, near your document. Under development Tagging works for files in the same folder as opened file. Soon will work on all opened files in the workspace. Writing Mode \u00b6 [TBD] Fold Paragraph lines \u00b6 Setting markdown-fiction-writer.view.foldSentences Separate lines from same paragraph can be folded/unfolded. This is specailly useful when OneSentencePerLine writing technique is used. Folding works for dialogue indents as well, if writing dialgoues with dialogue markers (like em-dash) is used: Syntax Highlighting \u00b6 Settings mmarkdown-fiction-writer.view.highlightDialogueMarkers markdown-fiction-writer.view.highlightDialogue Word Wrap Indent \u00b6 [tbd] Text Analysis \u00b6 Compute word frequency \u00b6 You can compute the repetition frequency of words and phrases up to 5 words. Get Writing Statistics \u00b6 Compute statistics like: word count characters (excluding spaces) characters (including spaces) estimates: word count (At 6 characters per word) lines (At 10 words per line) pages (At 24 lines per page) Press the refresh button to compute statistics for the current open file. Writer Mode \u00b6 [TBD] Status Bar \u00b6 markdown-fiction-writer.view.statusBar.enabled This extension comes with a status bar, enabled by default.","title":"Features"},{"location":"features/#text-editing","text":"","title":"Text Editing"},{"location":"features/#disable-key-bindings","text":"markdown-fiction-writer.edit.disableKeybindings Disables the following keybindings added by this extension: - Enter , Shift + Enter , Del , Backspace , Tab ) Note: If disabled , some of the other features, that depend or ar triggered by this keybindings will be disabled (eg. easy Paragraph Creation needs Enter end Shift + Enter in order to work properly).","title":"Disable Key-bindings"},{"location":"features/#easy-paragraph-creation","text":"markdown-fiction-writer.edit.easyParagraphCreation To create paragraphs in markdown, you need to add an extra empty line. That, usually, means pressing Enter key twice. With this setting, you can easily create new paragraphs by hitting one key only (or a combination). It has two options: Enter : pressing Enter once will add two line-breaks, and pressing Shift + Enter will add one line-break. Shift+Enter : pressing Enter once will add one line-break, but Shift + Enter will add two line-breaks.","title":"Easy Paragraph Creation"},{"location":"features/#writing-dialogues","text":"This is a proposed solution for writing dialogue. In some languages, dialogue is not marked by quotation marks, but is marked only at the beginning a dialogue line. For example, each line can start with em-dash (\u2014), like so: The Time Machine, by H. G. Wells \u2014 You mean to say that that machine has travelled into the future? said Filby. \u2014 Into the future or the past. I don\u2019t, for certain, know which. After an interval the Psychologist had an inspiration. \u2014 It must have gone into the past if it has gone anywhere, he said. Markdown can convert three dashes to em-dash and two dashes to en-dash. However, typing three dash character and one space is not necessarly convenient when writing lots of dialogue lines. A widespread practice is to write -- for an em-dash , and the text editor will automatically replace it.","title":"Writing Dialogues"},{"location":"features/#selecting-dialogue-punctuation","text":"markdown-fiction-writer.editDialogue.marker \"Hello,\" (quotes) default \u2014 Hello, (em-dash followed by one space) -- Hello , (two dashes followed by one space) --- Hello, (three dashes followed by one space) \u2014Hello, (em-dash, no space) --Hello, (two dashes, no space) ---Hello, (three dashes, no space With this feature, you can controlsthe punctuation used when writing dialogue. The following options are possible: Quotes: \"Hello,\" John said. ( default : this is equivalent with disabling all proposed dialogue features) Em-dash followed by one space: \u2014 Hello, John said. Two dashes followed by one space: -- Hello, John said. Three dashes followed by one space: --- Hello, John said. Em-dash, no space: \u2014Hello, John said. Two dashes, no space: -- Hello, John said. Three dashes, no space: --- Hello, John said. Once a dialogue marker is selected (other than quotes), the paragraph starting with that marker will be recognized as a dialogue paragraph enabeling other dialogue related features, like text formatting, auto replace, etc.","title":"Selecting dialogue punctuation:"},{"location":"features/#auto-replace-dialogue-markers","text":"markdown-fiction-writer.editDialogue.markerAutoReplace If enabled, typing -- followed by a space will insert the selected marker. Disable this feature if you do not want to auto-replace markers.","title":"Auto-replace dialogue markers"},{"location":"features/#easily-create-new-dialogue-paragraphs","text":"Selecting a dialogue marker (other than quotes) changes the Easy Paragraph Creation behaviour as follows: if new paragraph is created (either by Shift + Enter or by Enter ), and is from a dialogue paragraph (meaning, the paragraph starts with a marker), then the next paragraph will automatically start with the selected dialogue marker. This makes writing alternative dialogue lines much faster. when hitting new line, if the only thing on that line is a dialogue marker, is automatically deleted. when hitting backspace, and the only thing in front of the cursor is the dialogue marker, the line will be cleared","title":"Easily create new dialogue paragraphs"},{"location":"features/#using-dialgoue-indents","text":"Indent for sequential lines of the same dialogue paragraph. ( 0 for no indenting) This is especially useful when using the one sentence per line technique. Thus, having sentences from the same dialogue separated by simple line-breaks. -- Hi, said the first dialogue line. I am here, on multiple lines. -- Hi, said the other dialogue line. I am also here. The two lines continued their chat. markdown-fiction-writer.editDialogue.sentenceIndent The indent can be manually set under Edit Dialouge - Sentence Indent . markdown-fiction-writer.editDialogue.sentenceIndentAutoDetect If Edit Dialogue: Sentence Indent Auto-Detect is enabled, the indent will be automatically calculated based on the selected dialogue marker, and the previous setting will be ignored. Example: -- Hi, this is a dialogue. It uses two dashes and one space. Thus, it has a 3 space indent. \u2014 Hi, this uses em-dash and one space. It has just a two space indent.","title":"Using Dialgoue indents:"},{"location":"features/#formatting","text":"","title":"Formatting"},{"location":"features/#enable-document-formatting","text":"markdown-fiction-writer.textFormatting.enabled Enables all document formatting features. Experimental This is an experimental feature. It works by changing text in your document. Make sure you make a backup of your document before enabling this, or use is on drafts and test documents only.","title":"Enable Document Formatting"},{"location":"features/#remove-extra-spaces","text":"markdown-fiction-writer.textFormatting.removeExtraSpaces Removes multiple spaces (not at beginning or ending of lines), with one space. Before This is a text with a lot , of spaces. On multiple lines . Indents are not removed ! After This is a text with a lot, of spaces. On multiple lines. Indents are not removed!","title":"Remove extra spaces"},{"location":"features/#remove-trailing-spaces","text":"markdown-fiction-writer.textFormatting.removeTrailingSpaces Removes all whitespace characters from line ends. Before This is a text. Having too much space at the end of each line. After This is a text. Having too much space at the end of each line.","title":"Remove Trailing Spaces"},{"location":"features/#fix-paragraph-breaks","text":"markdown-fiction-writer.textFormatting.fixParagraphBreaks none default Soft line-breaks As New Paragraph Soft line-breaks In Same Paragraph One Sentence Per Line Converts soft and hard breaks, depending on the selected behaviour:","title":"Fix Paragraph Breaks"},{"location":"features/#soft-line-breaks-as-new-paragraph","text":"combines soft breaks from same paragraph into one line. (joins multi-line paragraphs) Before This is a line with a soft linebreak. This is a new paragraph. With another line break. And another line break After This is a line with a soft linebreak. This is a new paragraph. With another line break. And another line break","title":"Soft line-breaks As New Paragraph"},{"location":"features/#soft-line-breaks-in-same-paragraph","text":"Converts soft line-breaks to hard line-breaks. The result is having an extra empty before each soft break. (multiple paragraphs) Before This is a line with a soft linebreak. This is a new paragraph. With another line break. And another line break After This is a line with a soft linebreak. This is a new paragraph. With another line break. And another line break","title":"Soft line-breaks In Same Paragraph"},{"location":"features/#one-sentence-per-line","text":"This is a technique used by some writers. It consists of writing each sentence from the same paragraph on a new line. Paragraphs are still marked with an empty line. If enabled, this setting does the following: - Splits each line in sentences (using the boundary characters: . ! ? ; : ) - Adds every sentence on a new line. - Keeps spacing between paragraphs. Before # Using one sentence per line This means, each sentence. If in the same paragraph. Uses a soft line break. Already separated sentences, will remain as they are. Paragraph breaks are also kept. This is it. After # Using one sentence per line This means, each sentence. If in the same paragraph. Uses a soft line break. Already separated sentences, will remain as they are. Paragraph breaks are also kept. This is it.","title":"One Sentence Per Line"},{"location":"features/#fix-paragraph-spacing","text":"markdown-fiction-writer.textFormatting.fixParagraphSpacing Normalizes space between different paragraph types (header, body, dialogue, ...) by adding a new line if needed. Before # This is a header And this is a first line. The second sentence is this. Then, a lot of empty lines here. ## This can be another header And a lot here. *** After # This is a header And this is a first line. The second sentence is this. Then, a lot of empty lines here. ## This can be another header And a lot here. ***","title":"Fix Paragraph Spacing"},{"location":"features/#remove-extra-lines","text":"markdown-fiction-writer.textFormatting.removeExtraLines Reduces multiple empty lines (more than two), to a single empty line. Before And this is a first line. The second sentence is this. Then, a lot of empty lines here. And a lot here. *** After And this is a first line. The second sentence is this. Then, a lot of empty lines here. And a lot here. ***","title":"Remove Extra Lines"},{"location":"features/#fix-mismatch-dialogue-markers","text":"markdown-fiction-writer.textFormatting.fixMismatchDialogueMarkers If the currently selected dialogue marker is not quotes, then it replaces all known dialogue markers (not quotes) with the selected one. Before -- This text has mixed dialogue markers. --Some are without space. --- Yes, it has quite a lot. \u2014 It can be fixed. After \u2014 This text has mixed dialogue markers. \u2014 Some are without space. \u2014 Yes, it has quite a lot. \u2014 It can be fixed.","title":"Fix Mismatch Dialogue Markers"},{"location":"features/#fix-dialogue-indents","text":"markdown-fiction-writer.textFormatting.fixDialogueIndents Replaces all dialogue indents (visible if one sentence per line technique is used) with the currently selected dialogue indent. This works only if markdown-fiction-writer.editDialogue.marker is not quotes , and markdown-fiction-writer.editDialogue.sentenceIndent is greater than 0, or markdown-fiction-writer.editDialogue.sentenceIndentAutoDetect is enabled Before This text has mixed dialogue indents. -- Sentences for same dialogue. Start at different indents. -- Yes, this can be quite annoing sometimes. Some start too early. And some start too late. Of course, normal paragraphs are left untouched. After This text has mixed dialogue indents. -- Sentences for same dialogue. Start at different indents. -- Yes, this can be quite annoing sometimes. Some start too early. And some start too late. Of course, normal paragraphs are left untouched.","title":"Fix Dialogue Indents"},{"location":"features/#exporting","text":"","title":"Exporting"},{"location":"features/#requirements","text":"Important! This feature requires Pandoc . If you want to also compile .md to other document formats using this extension, you need to have Pandoc installed on your machine, and configured to run from command line! Pandoc is a universal document converter, that understands a large number of useful markdown syntax extensions, including document metadata (title, author, date); footnotes; tables; etc. You can get it from here: Installing pandoc . You can test that pandoc is properly installed by opening your prefered command-line app and running: pandoc --version You should get an output similar to: pandoc 2.11.4 Compiled with pandoc-types 1.22, texmath 0.12.1, skylighting 0.10.2, citeproc 0.3.0.5, ipynb 0.1.0.1 User data directory: C:\\Users\\YourUserName\\AppData\\Roaming\\pandoc Copyright (C) 2006-2021 John MacFarlane. Web: https://pandoc.org This is free software; see the source for copying conditions. There is no warranty, not even for merchantability or fitness for a particular purpose.","title":"Requirements"},{"location":"features/#including-other-documents","text":"This extension adds support for combining multiple markdown documents into one. You can use the following syntax {your_file.md} from the markdown document you want to export, and this extension will include the contents of your_file.md in the exported document. A common practice is to have just one TOC document, where you include all other documents. A simple toc.md document can look like this: {chapter01.md} {chapter02.md} {chapter03.md} {chapter04.md} This will include all 4 referenced files. Of course a TOC document can contain any additional markdown syntax: # My Book Title ## Preface Some opening words ## Chapter One {chapter01.md} ## Chapter Tso {chapter02.md} ## The End This is the end. If {chapter01.md} does not exist, you will get a warning message, but the exporting will still continue with the other documents. The path to included file needs to be relative to the document they are reference from. For example, the toc.md from the following directory: . \u251c\u2500 toc.md \u251c\u2500 prologue.md \u251c\u2500 part1 \u2502 \u251c\u2500 ch1.md \u2502 \u251c\u2500 ch2.md \u2502 \u2514\u2500 ch3.md \u251c\u2500 part2/ \u2502 \u251c\u2500 ch4.md/ \u2502 \u2514\u2500 ch5.md \u2514\u2500 epilogue.md could look like: {prologue.md} {part1\\ch1.md} {part1\\ch2.md} {part1\\ch3.md} {part2\\ch4.md} {part2\\ch5.md} {epilogue.md}","title":"Including other documents"},{"location":"features/#commands","text":"","title":"Commands"},{"location":"features/#compile-current-file","text":"[TBD]","title":"Compile Current File"},{"location":"features/#compile-selected-files","text":"Compiles all selected markdown documents (having .md extension) from current directory, into one file. The include order is filename order. [TBD]","title":"Compile Selected files"},{"location":"features/#compile-toc","text":"Exports the TOC file. A TOC file is a simple .md file that serves as a table of contents for exporting. The file-name can be configured under markdown-fiction-writer.export.tocFilename . By default, the toc.md file-name will be used. If the TOC file is searched for in two locations: first, in the same folder as the opened document second, in the workspace root. If no TOC files is found in either location, then compile will fail. Example: . \u251c\u2500 toc.md # The toc.md in workspace root \u251c\u2500 part1 \u2502 \u251c\u2500 chapter1.md \u2502 \u251c\u2500 chapter2.md \u2502 \u2514\u2500 toc.md # The toc.md from part.1 \u251c\u2500 part2/ \u2502 \u251c\u2500 chapter3.md/ \u2502 \u2514\u2500 chapter4.md if chapter1.md is opened, and Compile toc.md command is run, then /part1/toc.md will be used. if chapter4.md is opened, and Compile toc.md command is run, then /toc.md from workspace root will be used.","title":"Compile TOC"},{"location":"features/#view","text":"","title":"View"},{"location":"features/#typewriter-mode","text":"[TBD]","title":"Typewriter Mode"},{"location":"features/#file-tags","text":"Settings markdown-fiction-writer.view.fileTags markdown-fiction-writer.view.fileTagsEnabled Ability to add tags to files. Each file will display the corresponding badge (1 or 2 letter word) in file explorer: Go to: markdown-fiction-writer.view.fileTags Add a few tags (eg. draft = D , and rev1 = R1 ) Then open any .md file, and add // draft or // rev1 on the first line . if the tag line is not on the first line of the file, the tag will be ignored Save the document. You should see D or R1 as a badge in file explorer, near your document. Under development Tagging works for files in the same folder as opened file. Soon will work on all opened files in the workspace.","title":"File Tags"},{"location":"features/#writing-mode","text":"[TBD]","title":"Writing Mode"},{"location":"features/#fold-paragraph-lines","text":"Setting markdown-fiction-writer.view.foldSentences Separate lines from same paragraph can be folded/unfolded. This is specailly useful when OneSentencePerLine writing technique is used. Folding works for dialogue indents as well, if writing dialgoues with dialogue markers (like em-dash) is used:","title":"Fold Paragraph lines"},{"location":"features/#syntax-highlighting","text":"Settings mmarkdown-fiction-writer.view.highlightDialogueMarkers markdown-fiction-writer.view.highlightDialogue","title":"Syntax Highlighting"},{"location":"features/#word-wrap-indent","text":"[tbd]","title":"Word Wrap Indent"},{"location":"features/#text-analysis","text":"","title":"Text Analysis"},{"location":"features/#compute-word-frequency","text":"You can compute the repetition frequency of words and phrases up to 5 words.","title":"Compute word frequency"},{"location":"features/#get-writing-statistics","text":"Compute statistics like: word count characters (excluding spaces) characters (including spaces) estimates: word count (At 6 characters per word) lines (At 10 words per line) pages (At 24 lines per page) Press the refresh button to compute statistics for the current open file.","title":"Get Writing Statistics"},{"location":"features/#writer-mode","text":"[TBD]","title":"Writer Mode"},{"location":"features/#status-bar","text":"markdown-fiction-writer.view.statusBar.enabled This extension comes with a status bar, enabled by default.","title":"Status Bar"},{"location":"settings/","text":"This extension has the following settings: Setting Default Description edit.disableKeybindings false Disable editor keybindings added by this extension ( enter , shift+enter , delete , backspace , tab ). Note: If disabled , some of the settings will not work. edit.easyParagraphCreation Shift+Enter A new paragraph (two line breaks) will be created when pressing: editDialogue.marker -- Controls what punctuation is used when dialogue. editDialogue.markerAutoReplace true If anything other than quotes is selected, it automatically replaces the -- text at the begining of a new line, with the selected marker. editDialogue.sentenceIndent 3 Indent for sequential lines of the same dialogue paragraph. ( 0 for no indenting) editDialogue.sentenceIndentAutoDetect true Sets the line indent from the same dialogue paragraph equal with the selected markdown-fiction-writer.editDialogue.marker . view.wordWrapIndent 0 The hanging indent of wrapped lines. Warning: Only works if editor.wordWrap is enabled, and might change the editor.tabSize setting for markdown ._ view.foldParagraphLines true undefined export.outputFormat.default odt The output document format. Important: This requires having Pandoc installed on your system, and available to be run from commandline. export.outputFormat.alwaysShowFormatPicker false Select the output format each time an export command is run. If set to false , the selected markdown-fiction-writer.export.outputFormat.default will be used. export.showSaveDialogue Always Control when the Save File Dialogue is shown. export.outputTemplate.enabled false If enabled, the template file selected at markdown-fiction-writer.export.outputTemplate.file will be used when exporting to docx or odt formats. export.outputTemplate.file The output template to be used when exporting to docx or odt . Note: the template file extension must match the output type. It can be an absolut path, or relative to exported document. export.tocFilename toc.md The filename compiled by Compile TOC command. . export.smartDeshes true Converts -- to em-dash (\u2014) character in exported output. If not selected, it will default to en-dash (\u2013). Is PanDoc +old_dashes markdown extension. export.skipCodeComments true When parsing .md files, skips lines starting with // . textFormatting.enabled true This is feature is EXPERIMENTAL . Make sure make a backup before trying it out. If enabled, it formats document using the selected formatters. Formatting is available with Format Document command textFormatting.fixMismatchDialogueMarkers true If markdown-fiction-writer.editDialogue.marker is not quotes, replaces mismatched markers with current selected marker. textFormatting.fixDialogueIndents true If markdown-fiction-writer.editDialogue.marker is not quotes, and markdown-fiction-writer.editDialogue.sentenceIndent is enabled, reformats dialogue indents to selected dialogue indent. textFormatting.fixParagraphSpacing true Normalizes space between different paragraph types (header, body, dialogue, ...). textFormatting.removeExtraSpaces true Replaces multiple consecutive spaces to one single space. (not from begining or ending of line) textFormatting.removeExtraLines true Reduces multiple empty lines (more than two), to a single empty line. textFormatting.removeTrailingSpaces true Remove all whitespace characters from line ends. textFormatting.fixParagraphBreaks none Controls how paragraph breaks and soft line breaks will be formatted. view.writingMode.theme The theme to be used in Writing Mode. (leave empty for no theme switch) view.writingMode.fontSize 16 The font size to be used in Writing Mode Mode. view.statusBar.enabled true If enabled, the custom Fiction Writer status bar will be visible view.fileTags.enabled false If enabled, reads tags from .md files and display corresponding badge in file explorer. Recognizes tags defined under markdown-fiction-writer.view.fileTags.definitions view.fileTags.definitions undefined Custom file tags. Add the tag ( item ) on the first line of a .md file, like this: // draft , and you will see the value as a badge in file explorer. Note: the badges should be only 1 or 2 characters long (the others will be ignored), and tag names are case sensitive view.highlight.textBetweenQuotes false Highlights all text between quotes. Usefull for highlighting dialogues (if quoted syntax is used) view.highlight.dialogueMarkers true Highlights the dialogue markers (---, --, \u2014 or quote marks symbols).","title":"Settings"},{"location":"shortcuts/","text":"Key Description Enter New line. Shift + Enter New paragraph (or new dialogue, if from a dialogue) Backspace Delete dialogue line, or dialogue indent. Otherise, works as normal Tab Adds dialogue indent, if in a dialogue paragraph. F9 Compile current document Ctrl + F9 Compile all documents from current folder Ctrl + Shift + F9 Compile the configured TOC file Ctrl + F11 Toggle writing mode","title":"Keyboard Shortcuts"},{"location":"writing/","text":"","title":"About Writing"}]}