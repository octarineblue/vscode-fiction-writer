{
  "name": "markdown-fiction-writer",
  "displayName": "Markdown Fiction Writer",
  "description": "Tools for writing fiction",
  "icon": "resources/fiction-writer-icon.png",
  "publisher": "vsc-zoctarine",
  "preview": true,
  "homepage": "https://zoctarine.github.io/vscode-fiction-writer/",
  "version": "0.0.52",
  "engines": {
    "vscode": "^1.52.0"
  },
  "categories": [
    "Programming Languages",
    "Formatters",
    "Other"
  ],
  "keywords": [
    "markdown",
    "writing",
    "fiction",
    "dialogue",
    "metadata",
    "pandoc"
  ],
  "bugs": {
    "url": "https://github.com/zoctarine/vscode-fiction-writer/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/zoctarine/vscode-fiction-writer/"
  },
  "license": "MIT",
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "colors": [
      {
        "id": "fictionwriter.blue",
        "description": "Blue Color",
        "defaults": {
          "dark": "#2196F3",
          "light": "#1565C0",
          "highContrast": "#0000FF"
        }
      },
      {
        "id": "fictionwriter.red",
        "description": "Red Color",
        "defaults": {
          "dark": "#ef5350",
          "light": "#e53935",
          "highContrast": "#FF0000"
        }
      },
      {
        "id": "fictionwriter.lightred",
        "description": "Light Red Color",
        "defaults": {
          "dark": "#e06c75",
          "light": "#e06c75",
          "highContrast": "#FF0000"
        }
      },
      {
        "id": "fictionwriter.lime",
        "description": "Lime Color",
        "defaults": {
          "dark": "#8BC34A",
          "light": "#8BC34A",
          "highContrast": "#00FF00"
        }
      },
      {
        "id": "fictionwriter.green",
        "description": "Green Color",
        "defaults": {
          "dark": "#00E676",
          "light": "#2E7D32",
          "highContrast": "#00FF00"
        }
      },
      {
        "id": "fictionwriter.orange",
        "description": "Orange Color",
        "defaults": {
          "dark": "#FF9800",
          "light": "#EF6C00",
          "highContrast": "#000000"
        }
      },
      {
        "id": "fictionwriter.amber",
        "description": "Amber Color",
        "defaults": {
          "dark": "#FFC107",
          "light": "#FFA000",
          "highContrast": "#000000"
        }
      },
      {
        "id": "fictionwriter.purple",
        "description": "Purple Color",
        "defaults": {
          "dark": "#9C27B0",
          "light": "#9C27B0",
          "highContrast": "#ddb6b6"
        }
      },
      {
        "id": "fictionwriter.bluegrey",
        "description": "Blue Grey Color",
        "defaults": {
          "dark": "#607D8B",
          "light": "#607D8B",
          "highContrast": "#000000"
        }
      },
      {
        "id": "fictionwriter.grey",
        "description": "Grey Color",
        "defaults": {
          "dark": "#7e7e7e",
          "light": "#8e8e8e",
          "highContrast": "#000000"
        }
      },
      {
        "id": "fictionwriter.yellow",
        "description": "Yellow Color",
        "defaults": {
          "dark": "#FFEB3B",
          "light": "#FBC02D",
          "highContrast": "#FFFFFF"
        }
      },
      {
        "id": "fictionwriter.pink",
        "description": "Pink Color",
        "defaults": {
          "dark": "#F06292",
          "light": "#F06292",
          "highContrast": "#FF0000"
        }
      },
      {
        "id": "fictionwriter.white",
        "description": "White Color",
        "defaults": {
          "dark": "#cccccc",
          "light": "#FFFFFF",
          "highContrast": "#FFFFFF"
        }
      },
      {
        "id": "fictionwriter.black",
        "description": "Black Color",
        "defaults": {
          "dark": "#111111",
          "light": "#333333",
          "highContrast": "#000000"
        }
      }
    ],
    "configurationDefaults": {
      "[markdown]": {
        "editor.wordWrap": "on",
        "editor.quickSuggestions": false
      }
    },
    "views": {
      "explorer": [
        {
          "id": "fw-metadata",
          "name": "Metadata",
          "icon": "$(eye)",
          "contextualTitle": "Metadata",
          "when": "fw:isSupportedMetadata && config.markdown-fiction-writer.metadata.enabled"
        },
        {
          "id": "fw-notes",
          "name": "Notes",
          "type": "webview",
          "when": "fw:showNotes && config.markdown-fiction-writer.notes.enabled"
        }
      ],
      "word-frequency-explorer": [
        {
          "id": "fw-projectFiles",
          "name": "Project files",
          "icon": "eye",
          "contextualTitle": "Files",
          "when": "false && fw:isDevelopmentMode"
        },
        {
          "id": "fw-wordFrequencies",
          "name": "Word Frequencies",
          "icon": "$(eye)",
          "contextualTitle": "Word n-Gram Frequencies"
        },
        {
          "id": "fw-statistics",
          "name": "Statistics",
          "icon": "$(eye)",
          "contextualTitle": "Document statistics"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "fw-wordFrequencies",
        "contents": "Press refresh button to compute word-gram frequencies for current file.\n[Refresh](command:fiction-writer.extension.wordFrequency.refresh)"
      },
      {
        "view": "fw-statistics",
        "contents": "Press refresh button to compute statistics for current file.\n[Refresh](command:fiction-writer.extension.statistics.refresh)"
      }
    ],
    "menus": {
      "view/item/context": [
        {
          "command": "fiction-writer.extension.wordFrequency.next.down",
          "when": "view == fw-wordFrequencies && viewItem == wordStat",
          "group": "inline"
        },
        {
          "command": "fiction-writer.extension.wordFrequency.next.up",
          "when": "view == fw-wordFrequencies && viewItem == wordStat",
          "group": "inline"
        }
      ],
      "view/title": [
        {
          "command": "fiction-writer.extension.notes.open",
          "group": "navigation",
          "when": "fw:hasOpenedNote && view == fw-notes"
        },
        {
          "command": "fiction-writer.extension.notes.new",
          "group": "navigation",
          "when": "!fw:hasOpenedNote && view == fw-notes"
        },
        {
          "command": "fiction-writer.extension.notes.save",
          "group": "navigation",
          "when": "fw:hasOpenedNote && view == fw-notes"
        },
        {
          "command": "fiction-writer.extension.notes.pinOn",
          "group": "navigation",
          "when": "fw:hasOpenedNote && !fw:isNotePinned && view == fw-notes"
        },
        {
          "command": "fiction-writer.extension.notes.pinOff",
          "group": "navigation",
          "when": "fw:hasOpenedNote && fw:isNotePinned && view == fw-notes"
        },
        {
          "command": "fiction-writer.extension.wordFrequency.refresh",
          "when": "view == fw-wordFrequencies",
          "group": "navigation"
        },
        {
          "command": "fiction-writer.extension.wordFrequency.clear",
          "when": "view == fw-wordFrequencies",
          "group": "navigation"
        },
        {
          "command": "fiction-writer.extension.wordFrequency.open",
          "when": "view == fw-wordFrequencies",
          "group": "navigation"
        },
        {
          "command": "fiction-writer.extension.statistics.refresh",
          "when": "view == fw-statistics",
          "group": "navigation"
        },
        {
          "command": "fiction-writer.extension.metadata.refresh",
          "when": "view == fw-metadata",
          "group": "navigation"
        },
        {
          "command": "fiction-writer.extension.metadata.enableSummary",
          "when": "view == fw-metadata",
          "group": "navigation"
        },
        {
          "command": "fiction-writer.extension.metadata.openFile",
          "when": "view == fw-metadata",
          "group": "navigation"
        }
      ],
      "explorer/context": [
        {
          "command": "fiction-writer.extension.renameGroup",
          "group": "1_modification",
          "when": "config.markdown-fiction-writer.smartRename.enabled && resourceScheme == file && resourcePath =~ /\\.md(\\.yml|\\.txt)*$/gim"
        }
      ],
      "commandPalette": [
        {
          "command": "fiction-writer.extension.showIndexes",
          "when": "fw:isDevelopmentMode"
        },
        {
          "command": "fiction-writer.extension.reindex",
          "when": "fw:isDevelopmentMode"
        },
        {
          "command": "fiction-writer.extension.renameGroup",
          "when": "false"
        },
        {
          "command": "fiction-writer.extension.notes.open",
          "when": "false"
        },
        {
          "command": "fiction-writer.extension.notes.save",
          "when": "false"
        },
        {
          "command": "fiction-writer.extension.notes.new",
          "when": "false"
        },
        {
          "command": "fiction-writer.extension.notes.pinOn",
          "when": "false"
        },
        {
          "command": "fiction-writer.extension.notes.pinOff",
          "when": "false"
        },
        {
          "command": "fiction-writer.extension.metadata.enableSummary",
          "when": "false"
        },
        {
          "command": "fiction-writer.extension.metadata.openFile",
          "when": "false"
        },
        {
          "command": "fiction-writer.extension.metadata.refresh",
          "when": "false"
        },
        {
          "command": "fiction-writer.extension.wordFrequency.open",
          "when": "false"
        },
        {
          "command": "fiction-writer.extension.wordFrequency.refresh",
          "when": "false"
        },
        {
          "command": "fiction-writer.extension.statistics.refresh",
          "when": "false"
        },
        {
          "command": "fiction-writer.extension.wordFrequency.clear",
          "when": "false"
        },
        {
          "command": "fiction-writer.extension.wordFrequency.next.up",
          "when": "false"
        },
        {
          "command": "fiction-writer.extension.wordFrequency.next.down",
          "when": "false"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "word-frequency-explorer",
          "title": "Document Statistics",
          "icon": "$(book)"
        }
      ]
    },
    "configuration": {
      "type": "array",
      "name": "markdown-fiction-writer",
      "title": "Markdown Fiction Writer",
      "properties": {
        "markdown-fiction-writer.smartRename.enabled": {
          "type": "boolean",
          "scope": "application",
          "default": true,
          "markdownDescription": "If enabled, allows ordering of files based on number prefix."
        },
        "markdown-fiction-writer.smartRename.renameRelatedFiles": {
          "type": "string",
          "scope": "application",
          "default": "Ask Every Time",
          "enum": [
            "Never",
            "Always",
            "Ask Every Time"
          ],
          "markdownEnumDescriptions": [
            "Disables the rename related feature.",
            "Will always rename/move `.yml` and `.md` files with same name, together.",
            "For each rename/move operation, Will ask if `.yml` and `.md` files with same name are found on disk."
          ],
          "markdownDescription": "If `enabled`, renames/moves related (`.yml` and `.md`) files together."
        },
        "markdown-fiction-writer.edit.disableKeybindings": {
          "type": "boolean",
          "scope": "application",
          "default": false,
          "markdownDescription": "Disable editor keybindings added by this extension (`enter`, `shift+enter`, `delete`, `backspace`, `tab`).\n\n**Note:** If `disabled`, some of the settings will not work.\n\n\n\n[Open Online Documentation](https://zoctarine.github.io/vscode-fiction-writer/edit/)"
        },
        "markdown-fiction-writer.edit.easyParagraphCreation": {
          "type": "string",
          "default": "Shift+Enter",
          "scope": "application",
          "markdownDescription": "A new paragraph (two line breaks) will be created when pressing:",
          "enum": [
            "Enter",
            "Shift+Enter"
          ],
          "markdownEnumDescriptions": [
            "- `enter` will add two line-breaks.\n\n- `shift`+`enter` will add one line-break.",
            "- `enter` will add one line-break.\n\n- `shift`+`enter` will add two line-breaks."
          ]
        },
        "markdown-fiction-writer.editDialogue.marker": {
          "type": "string",
          "scope": "application",
          "default": "-- ",
          "markdownDescription": "Controls what punctuation is used when dialogue.",
          "enum": [
            "\"Hello,\" (quotes)",
            "— Hello, (em-dash followed by one space)",
            "-- Hello, (two dashes followed by one space)",
            "--- Hello, (three dashes followed by one space)",
            "—Hello, (em-dash, no space)",
            "--Hello, (two dashes, no space)",
            "---Hello, (three dashes, no space)"
          ],
          "markdownEnumDescriptions": [
            "Quotes:\n\n \"Hello,\" John said.",
            "Em-dash followed by one space: \n\n — Hello, John said.",
            "Two dashes followed by one space: \n\n -- Hello, John said.",
            "Three dashes followed by one space: \n\n --- Hello, John said.",
            "Em-dash, no space: \n\n —Hello, John said.",
            "Two dashes, no space: \n\n --Hello, John said.",
            "Three dashes, no space: \n\n ---Hello, John said."
          ]
        },
        "markdown-fiction-writer.editDialogue.markerAutoReplace": {
          "type": "boolean",
          "scope": "application",
          "default": true,
          "markdownDescription": "If anything other than `quotes` is selected, it automatically replaces the `-- ` text at the begining of a new line, with the selected marker."
        },
        "markdown-fiction-writer.editDialogue.sentenceIndent": {
          "type": "number",
          "scope": "application",
          "default": 3,
          "minimum": 0,
          "maximum": 100,
          "markdownDescription": "Indent for sequential lines of the same dialogue paragraph. (`0` for no indenting)"
        },
        "markdown-fiction-writer.editDialogue.sentenceIndentAutoDetect": {
          "type": "boolean",
          "scope": "application",
          "default": true,
          "markdownDescription": "Sets the line indent from the same dialogue paragraph equal with the selected `#markdown-fiction-writer.editDialogue.marker#`."
        },
        "markdown-fiction-writer.view.wordWrapIndent": {
          "type": "number",
          "scope": "application",
          "default": 0,
          "minimum": -1,
          "maximum": 100,
          "markdownDescription": "The hanging indent of wrapped lines.\n\n**Select:**\n- `0` for same indent as first line,\n- `-1` for now wrapping indent,\n- any other value for hanging indent.\n\n\n\n_**Warning:** Only works if `#editor.wordWrap#` is enabled, and might change the `#editor.tabSize#` setting for `markdown`._"
        },
        "markdown-fiction-writer.view.foldParagraphLines": {
          "type": "boolean",
          "scope": "application",
          "default": true,
          "description": "Show folding marker for paragraphs with multiple lines. (soft-breaks)"
        },
        "markdown-fiction-writer.export.include.showsErrorInOutputFile": {
          "type": "boolean",
          "scope": "application",
          "default": true,
          "description": "Shows errors in compiled document."
        },
        "markdown-fiction-writer.export.include.enabled": {
          "type": "boolean",
          "scope": "application",
          "default": true,
          "markdownDescription": "If `enabled`, the `{DOCUMENT_ID}` or `{document/file/path/filename.md}` syntax can be used to include on `.md` file into another file"
        },
        "markdown-fiction-writer.export.include.searchDocumentIdsInAllOpenFilesAndWorkspaces": {
          "type": "boolean",
          "scope": "application",
          "default": false,
          "markdownDescription": "When including files, search `{DOCUMENT_ID}` in all opened files and workspace folders. If `disabled`, it only searches in the workspace folder that the document belongs to."
        },
        "markdown-fiction-writer.export.outputFormat.default": {
          "type": "string",
          "scope": "application",
          "default": "odt",
          "enum": [
            "docx",
            "odt",
            "html",
            "asciidoc",
            "adoc",
            "epub",
            "fb2",
            "docbook"
          ],
          "markdownDescription": "The output document format.\n\n**Important:** This requires having [Pandoc](https://pandoc.org/installing.html) installed on your system, and available to be run from commandline."
        },
        "markdown-fiction-writer.export.outputFormat.alwaysShowFormatPicker": {
          "type": "boolean",
          "scope": "application",
          "default": false,
          "markdownDescription": "Select the output format each time an export command is run.\n\nIf set to `false`, the selected `#markdown-fiction-writer.export.outputFormat.default#` will be used."
        },
        "markdown-fiction-writer.export.showSaveDialogue": {
          "type": "string",
          "scope": "application",
          "default": "Always",
          "enum": [
            "Always",
            "Never"
          ],
          "markdownEnumDescriptions": [
            "The Save File Dialogue is shown every time an export command is run.",
            "Never show the Save File Dialogue. The exported document will be saved in the same directory with the source document(s)."
          ],
          "markdownDescription": "Control when the Save File Dialogue is shown."
        },
        "markdown-fiction-writer.export.outputTemplate.enabled": {
          "type": "boolean",
          "scope": "application",
          "default": false,
          "markdownDescription": "If enabled, the template file selected at `#markdown-fiction-writer.export.outputTemplate.file#` will be used when exporting to `docx` or `odt` formats."
        },
        "markdown-fiction-writer.export.outputTemplate.file": {
          "type": "string",
          "scope": "application",
          "default": "",
          "markdownDescription": "The output template to be used when exporting to `docx` or `odt`.\n\n**Note:** the template file extension must match the output type. It can be an absolut path, or relative to exported document."
        },
        "markdown-fiction-writer.export.tocFilename": {
          "type": "string",
          "scope": "application",
          "default": "toc.md",
          "markdownDescription": "The filename compiled by **Compile TOC command.**."
        },
        "markdown-fiction-writer.export.smartDeshes": {
          "type": "boolean",
          "scope": "application",
          "default": true,
          "markdownDescription": "Converts `--` to `em-dash` (—) character in exported output. If not selected, it will default to `en-dash` (–).\n\nIs PanDoc `+old_dashes` markdown extension."
        },
        "markdown-fiction-writer.export.skipCodeComments": {
          "type": "boolean",
          "scope": "application",
          "default": true,
          "markdownDescription": "When parsing `.md` files, skips lines starting with `//`. "
        },
        "markdown-fiction-writer.textFormatting.enabled": {
          "type": "boolean",
          "scope": "application",
          "default": true,
          "markdownDescription": "This is feature is **EXPERIMENTAL**. Make sure make a backup before trying it out.\n\nIf enabled, it formats document using the selected formatters. Formatting is available with `Format Document` command..\n\n[Open Online Documentation](https://zoctarine.github.io/vscode-fiction-writer/format/"
        },
        "markdown-fiction-writer.textFormatting.fixMismatchDialogueMarkers": {
          "scope": "application",
          "type": "boolean",
          "default": true,
          "markdownDescription": "If `#markdown-fiction-writer.editDialogue.marker#` is not quotes, replaces mismatched markers with current selected marker."
        },
        "markdown-fiction-writer.textFormatting.fixDialogueIndents": {
          "scope": "application",
          "type": "boolean",
          "default": true,
          "markdownDescription": "If `#markdown-fiction-writer.editDialogue.marker#` is not quotes, and `#markdown-fiction-writer.editDialogue.sentenceIndent#` is enabled, reformats dialogue indents to selected dialogue indent."
        },
        "markdown-fiction-writer.textFormatting.fixParagraphSpacing": {
          "scope": "application",
          "type": "boolean",
          "default": true,
          "markdownDescription": "Normalizes space between different paragraph types (header, body, dialogue, ...)."
        },
        "markdown-fiction-writer.textFormatting.removeExtraSpaces": {
          "scope": "application",
          "type": "boolean",
          "default": true,
          "markdownDescription": "Replaces multiple consecutive spaces with one single space. (not from begining or ending of line)"
        },
        "markdown-fiction-writer.textFormatting.removeExtraLines": {
          "scope": "application",
          "type": "boolean",
          "default": true,
          "markdownDescription": "Reduces multiple empty lines (more than two), to a single empty line."
        },
        "markdown-fiction-writer.textFormatting.removeTrailingSpaces": {
          "scope": "application",
          "type": "boolean",
          "default": true,
          "markdownDescription": "Remove all whitespace characters from line ends."
        },
        "markdown-fiction-writer.textFormatting.fixParagraphBreaks": {
          "scope": "application",
          "type": "string",
          "default": "none",
          "enum": [
            "none",
            "Soft line-breaks As New Paragraph",
            "Soft line-breaks In Same Paragraph",
            "One Sentence Per Line"
          ],
          "markdownDescription": "Controls how paragraph breaks and soft line breaks will be formatted.",
          "markdownEnumDescriptions": [
            "No change to linebreaks",
            "Transforms each soft line-break to a new paragraph.",
            "Merges soft line-break lines into same paragraph line.",
            "Splits lines into sentences. Each sentence is on a separate line."
          ]
        },
        "markdown-fiction-writer.writingMode.theme": {
          "scope": "application",
          "type": "string",
          "default": "",
          "markdownDescription": "The theme to be used in Writing Mode. _(leave empty for no theme switch)_"
        },
        "markdown-fiction-writer.writingMode.fontSize": {
          "scope": "application",
          "type": "number",
          "default": 16,
          "minimum": 5,
          "maximum": 100,
          "markdownDescription": "The font size to be used in Writing Mode."
        },
        "markdown-fiction-writer.writingMode.toggleFocusMode": {
          "type": "boolean",
          "scope": "application",
          "default": true,
          "description": "When entering Writing Mode, it fades out all text except current text line (known as Focus Mode)"
        },
        "markdown-fiction-writer.view.focusMode.opacity": {
          "type": "number",
          "scope": "application",
          "minimum": 0.1,
          "maximum": 1.0,
          "default": 0.4,
          "description": "Opacity for fade out text when focus mode is enabled"
        },
        "markdown-fiction-writer.view.statusBar.enabled": {
          "scope": "application",
          "type": "boolean",
          "default": true,
          "markdownDescription": "Show the custom Fiction Writer status bar."
        },
        "markdown-fiction-writer.view.statusBar.items": {
          "scope": "application",
          "type":"object",
          "default": {
            "Select Dialogue Punctuation": "show",
            "Enable/Disable Keybindings": "show",
            "New Paragraph On Enter Toggle": "show",
            "Typewriter Mode Toggle": "show",
            "Focus Mode Toggle": "show",
            "Writing Mode Toggle": "show",
            "Fold All": "show",
            "Unfold All": "show",
            "Compile/Export Documents": "show",
            "Open Fiction Writer Settings": "show"
          },
          "properties": {
            "Select Dialogue Punctuation": { "type": "string", "enum": ["show", "hide"] },
            "Enable/Disable Keybindings": { "type": "string", "enum": ["show", "hide"] },
            "New Paragraph On Enter Toggle": { "type": "string", "enum": ["show", "hide"] },
            "Typewriter Mode Toggle": { "type": "string", "enum": ["show", "hide"] },
            "Focus Mode Toggle": { "type": "string", "enum": ["show", "hide"] },
            "Writing Mode Toggle": { "type": "string", "enum": ["show", "hide"] },
            "Fold All": { "type": "string", "enum": ["show", "hide"] },
            "Unfold All": { "type": "string", "enum": ["show", "hide"] },
            "Compile/Export Documents": { "type": "string", "enum": ["show", "hide"] },
            "Open Fiction Writer Settings": { "type": "string", "enum": ["show", "hide"] }
          },
         
          "additionalProperties": false,
          "markdownDescription": "`show`/`hide` items on the **Markdown Fiction Writer** status bar"
        },
        "markdown-fiction-writer.metadata.keywords.colors": {
          "type": "object",
          "scope": "application",
          "default": {
            "blue": "blue",
            "red": "red",
            "lightred": "lightred",
            "green": "green",
            "orange": "orange",
            "amber": "amber",
            "purple": "purple",
            "pink": "pink",
            "bluegrey": "bluegrey",
            "grey": "grey",
            "yellow": "yellow",
            "lime": "lime",
            "white": "white",
            "black": "black",
            "draft": "grey",
            "rev1": "amber",
            "rev2": "yellow",
            "done": "green"
          },
          "markdownDescription": "Defines a keyword (**Item**) and associate a color (**Value**) to it. The colors can be visible in **Metadata** view or **Explorer** view.",
          "additionalProperties": {
            "type": "string",
            "enum": [
              "default color",
              "blue",
              "red",
              "lightred",
              "green",
              "orange",
              "amber",
              "purple",
              "bluegrey",
              "grey",
              "yellow",
              "white",
              "black"
            ]
          }
        },
        "markdown-fiction-writer.metadata.keywords.colorsInMetadataView": {
          "type": "boolean",
          "scope": "application",
          "default": true,
          "markdownDescription": "Use [Keyword Colors](#markdown-fiction-writer.metadata.keywords.colors) as icon colors in **Metadata** view.\n\n_**Note:** if no icon is set/visible, then the color will not be visible._"
        },
        "markdown-fiction-writer.metadata.keywords.colorsInFileExplorer": {
          "type": "boolean",
          "scope": "application",
          "default": true,
          "markdownDescription": "Use [Keyword Colors](#markdown-fiction-writer.metadata.keywords.colors) in **Explorer** view.\n\n _**Note:** Only the `first matched keyword` will be considered_\n\n_**Note:** file colors can be ovewritten by other extensions, so they might not show as expected._\n\n_**Also:** `#explorer.decorations.colors#` must be `enabled`._"
        },
        "markdown-fiction-writer.metadata.categories.icons": {
          "type": "object",
          "default": {
            "tag": "tag",
            "tags": "tag",
            "author": "edit",
            "authors": "edit",
            "keyword": "circle-filled",
            "keywords": "circle-filled",
            "character": "person",
            "characters": "organization",
            "title": "symbol-type-parameter",
            "summary": "output",
            "description": "output",
            "status": "repo",
            "pov": "eye"
          },
          "scope": "application",
          "markdownDescription": "Assign for each metadata category (**Item**) a vscode icon (**Value**)\n\n_**Note:** You can use any icon from [Product Icon Reference](https://code.visualstudio.com/api/references/icons-in-labels#icon-listing)._",
          "additionalProperties": {
            "type": "string"
          }
        },
        "markdown-fiction-writer.metadata.categories.showIcons": {
          "type": "boolean",
          "scope": "application",
          "default": true,
          "markdownDescription": "Show icons in **Metadata** view."
        },
        "markdown-fiction-writer.metadata.categories.showNames": {
          "type": "boolean",
          "scope": "application",
          "default": true,
          "markdownDescription": "If `disabled`, it hides category name in **Metadata View** for 1st level categories only."
        },
        "markdown-fiction-writer.metadata.easyLists": {
          "type": "string",
          "scope": "application",
          "default": ",",
          "markdownDescription": "Metadata values separated by this string, will be treated as list items.\n\nEnter the list item separator character below _(or leave it empty to disable this feature)_:\n\n_**Example:** `item1, item2, item three` will be equivalent to `[item1, item2, item three]` if the separator is comma (`,`)._\n\n"
        },
        "markdown-fiction-writer.metadata.categories.summaryEnabled": {
          "type": "boolean",
          "scope": "application",
          "default": true,
          "markdownDescription": "If `enabled`, it will show the contents of the `summary` 1st level category in the _message_ section of the  **Metadata View**, and not in the tree itself.\n\n To use it, simply define a metadata block:\n\n`---`\n\n**`summary: The document summary`**\n\n`---`"
        },
        "markdown-fiction-writer.metadata.enabled": {
          "type": "boolean",
          "scope": "application",
          "default": true,
          "markdownDescription": "It enables metadata reltated features. If `disabled` then **all** metadata related featueres will be disabled (parsing, metadata view, colors, etc...).\n\n[Open Online Documentation](https://zoctarine.github.io/vscode-fiction-writer/metadata/)"
        },
        "markdown-fiction-writer.metadata.categories.default": {
          "type": "string",
          "scope": "application",
          "default": "tags",
          "markdownDescription": "Assigning keywords to this category, if none is specified.\n\nFor example, if default category is `tags`, then the metadata block:\n\n`---`\n\n**`draft, ch1`**\n\n`---`\n\n is equivalent to:\n\n`---`\n\n_`tags`_`: `**`draft, ch1`**\n\n`---`"
        },
        "markdown-fiction-writer.metadata.keywords.colorsCategory": {
          "type": "string",
          "scope": "application",
          "markdownDescription": "Uses only this category when resolving **Explorer** colors. _(leave empty to do a full metadata search)_\n\n_**Note:** the `first matched keyword` in this category will dictate the color._"
        },
        "markdown-fiction-writer.metadata.keywords.badgesCategory": {
          "type": "string",
          "scope": "application",
          "markdownDescription": "Uses only this category when resolving **Explorer** badges. _(leave empty to do a full metadata search)_\n\n_**Note:** the `first matched keyword` in this category will dictate the badge._"
        },
        "markdown-fiction-writer.metadata.keywords.badges": {
          "type": "object",
          "default": {
            "draft": "D",
            "rev1": "R1",
            "rev2": "R2",
            "done": "OK"
          },
          "scope": "application",
          "markdownDescription": "",
          "additionalProperties": {
            "type": "string"
          }
        },
        "markdown-fiction-writer.metadata.keywords.badgesInFileExplorer": {
          "type": "boolean",
          "scope": "application",
          "default": true,
          "markdownDescription": "Show [Keyword Badges](#markdown-fiction-writer.metadata.keywords.badges) in **Explorer** view.\n\n _**Note:** Only the first matched keyword will be considered._"
        },
        "markdown-fiction-writer.view.fadeMetadata": {
          "type": "boolean",
          "scope": "application",
          "default": true,
          "markdownDescription": "Fade markdown metadata section by 50%."
        },
        "markdown-fiction-writer.view.highlight.textBetweenQuotes": {
          "type": "boolean",
          "scope": "application",
          "default": false,
          "markdownDescription": "Highlights all text between quotes. Usefull for highlighting dialogues (if quoted syntax is used)"
        },
        "markdown-fiction-writer.view.highlight.dialogueMarkers": {
          "type": "boolean",
          "scope": "application",
          "default": true,
          "markdownDescription": "Highlights the dialogue markers (---, --, — or quote marks symbols)."
        },
        "markdown-fiction-writer.notes.enabled": {
          "type": "boolean",
          "scope": "application",
          "default": true,
          "markdownDescription": "Enables the notes view, that recognizes (and groups) `.txt` files together with `.md` and metadata files.\n\n[Open Online Documentation](https://zoctarine.github.io/vscode-fiction-writer/notes/)"
        },
        "markdown-fiction-writer.notes.defaultText": {
          "type": "array",
          "scope": "application",
          "default": [
            "Your Notes Here"
          ],
          "items": {
            "type": "string"
          },
          "markdownDescription": "The default text for all new note files.\n\nAdd each line as a new _item_."
        }
      }
    },
    "commands": [
      {
        "command": "fiction-writer.extension.showIndexes",
        "category": "Markdown Fiction Writer",
        "title": "Developer: Show Indexes"
      },
      {
        "command": "fiction-writer.extension.reindex",
        "category": "Markdown Fiction Writer",
        "title": "Developer: Reindex"
      },
      {
        "command": "fiction-writer.extension.renameGroup",
        "category": "Markdown Fiction Writer",
        "title": "Rename related files"
      },
      {
        "command": "fiction-writer.extension.notes.new",
        "category": "Markdown Fiction Writer",
        "title": "Create New Notes File",
        "icon": "$(new-file)"
      },
      {
        "command": "fiction-writer.extension.notes.open",
        "category": "Markdown Fiction Writer",
        "title": "Open Notes File",
        "icon": "$(go-to-file)"
      },
      {
        "command": "fiction-writer.extension.notes.save",
        "category": "Markdown Fiction Writer",
        "title": "Save Notes",
        "icon": "$(save)"
      },
      {
        "command": "fiction-writer.extension.notes.pinOn",
        "category": "Markdown Fiction Writer",
        "title": "Pin ON",
        "icon": "$(pin)",
        "when": "false"
      },
      {
        "command": "fiction-writer.extension.notes.pinOff",
        "category": "Markdown Fiction Writer",
        "title": "Pin OFF",
        "icon": "$(pinned)",
        "when": "false"
      },
      {
        "command": "fiction-writer.extension.setWritingModeTheme",
        "title": "Set Current Theme as Writing Mode Theme",
        "category": "Markdown Fiction Writer"
      },
      {
        "command": "fiction-writer.extension.selectWritingModeFontSize",
        "title": "Select Writing Mode Font Size",
        "category": "Markdown Fiction Writer"
      },
      {
        "command": "fiction-writer.extension.selectWritingModeTheme",
        "title": "Select Writing Mode Theme",
        "category": "Markdown Fiction Writer"
      },
      {
        "command": "fiction-writer.extension.exitWritingMode",
        "title": "Exit Writing Mode",
        "category": "Markdown Fiction Writer"
      },
      {
        "command": "fiction-writer.extension.toggleFocusMode",
        "title": "Toggle Focus Mode",
        "category": "Markdown Fiction Writer"
      },
      {
        "command": "fiction-writer.extension.toggleWritingMode",
        "title": "Toggle Writing Mode",
        "category": "Markdown Fiction Writer"
      },
      {
        "command": "fiction-writer.extension.compile",
        "title": "Compile...",
        "category": "Markdown Fiction Writer"
      },
      {
        "command": "fiction-writer.extension.compileFile",
        "title": "Compile current document",
        "category": "Markdown Fiction Writer"
      },
      {
        "command": "fiction-writer.extension.compileAll",
        "title": "Compile all documents",
        "category": "Markdown Fiction Writer"
      },
      {
        "command": "fiction-writer.extension.compileToc",
        "title": "Compile TOC file",
        "category": "Markdown Fiction Writer"
      },
      {
        "command": "fiction-writer.extension.selectEditMode",
        "title": "Select Edit Mode",
        "category": "Markdown Fiction Writer"
      },
      {
        "command": "fiction-writer.extension.toggleNewParagraph",
        "title": "Toggle New Paragraph on Enter",
        "category": "Markdown Fiction Writer"
      },
      {
        "command": "fiction-writer.extension.toggleKeybindings",
        "title": "Toggle Keybindings",
        "category": "Markdown Fiction Writer"
      },
      {
        "command": "fiction-writer.extension.toggleTypewriterMode",
        "title": "Toggle Typewriter Mode",
        "category": "Markdown Fiction Writer"
      },
      {
        "command": "fiction-writer.extension.wordFrequency.refresh",
        "title": "Refresh Word Frequencies",
        "icon": "$(refresh)",
        "category": "Markdown Fiction Writer",
        "when": "false"
      },
      {
        "command": "fiction-writer.extension.wordFrequency.open",
        "category": "Markdown Fiction Writer",
        "title": "Open Computed Document",
        "icon": "$(go-to-file)"
      },
      {
        "command": "fiction-writer.extension.statistics.refresh",
        "title": "Refresh Document Statistics",
        "icon": "$(refresh)",
        "category": "Markdown Fiction Writer",
        "when": "false"
      },
      {
        "command": "fiction-writer.extension.metadata.refresh",
        "title": "Refresh Metadata",
        "icon": "$(refresh)",
        "category": "Markdown Fiction Writer"
      },
      {
        "command": "fiction-writer.extension.metadata.openFile",
        "title": "Open File Containing Metadata",
        "icon": "$(go-to-file)",
        "category": "Markdown Fiction Writer"
      },
      {
        "command": "fiction-writer.extension.metadata.enableSummary",
        "title": "Enable/Disable Summary",
        "icon": "$(note)",
        "category": "Markdown Fiction Writer"
      },
      {
        "command": "fiction-writer.extension.wordFrequency.clear",
        "title": "Clear",
        "icon": "$(clear-all)",
        "category": "Markdown Fiction Writer",
        "when": "false"
      },
      {
        "command": "fiction-writer.extension.wordFrequency.next.up",
        "title": "Select Previous",
        "icon": "$(find-previous-match)",
        "category": "Markdown Fiction Writer",
        "when": "false"
      },
      {
        "command": "fiction-writer.extension.wordFrequency.next.down",
        "title": "Select Next",
        "icon": "$(find-next-match)",
        "category": "Markdown Fiction Writer",
        "when": "false"
      }
    ],
    "keybindings": [
      {
        "command": "fiction-writer.extension.onNewLine",
        "key": "enter",
        "mac": "enter",
        "when": "!config.markdown-fiction-writer.edit.disableKeybindings && textInputFocus && !editorReadonly && editorLangId == markdown && !suggestWidgetVisible"
      },
      {
        "command": "fiction-writer.extension.onNewLineAltered",
        "key": "shift+enter",
        "mac": "shift+enter",
        "when": "!config.markdown-fiction-writer.edit.disableKeybindings && textInputFocus && !editorReadonly && editorLangId == markdown && !suggestWidgetVisible"
      },
      {
        "command": "fiction-writer.extension.onBackspace",
        "key": "backspace",
        "mac": "backspace",
        "when": "!config.markdown-fiction-writer.edit.disableKeybindings && textInputFocus && !editorReadonly && editorLangId == markdown && !suggestWidgetVisible"
      },
      {
        "command": "fiction-writer.extension.onDelete",
        "key": "delete",
        "mac": "delete",
        "when": "!config.markdown-fiction-writer.edit.disableKeybindings && textInputFocus && !editorReadonly && editorLangId == markdown && !suggestWidgetVisible"
      },
      {
        "command": "fiction-writer.extension.onTab",
        "key": "tab",
        "mac": "tab",
        "when": "!config.markdown-fiction-writer.edit.disableKeybindings && textInputFocus && !editorReadonly && editorLangId == markdown && !suggestWidgetVisible"
      },
      {
        "command": "fiction-writer.extension.compileFile",
        "key": "f9",
        "mac": "f9",
        "when": "textInputFocus && editorLangId == markdown"
      },
      {
        "command": "fiction-writer.extension.compileAll",
        "key": "shift+f9",
        "mac": "shift+f9",
        "when": "textInputFocus && editorLangId == markdown"
      },
      {
        "command": "fiction-writer.extension.compileToc",
        "key": "ctrl+shift+f9",
        "mac": "cmf+shift+f9",
        "when": "textInputFocus && editorLangId == markdown"
      },
      {
        "command": "fiction-writer.extension.toggleWritingMode",
        "key": "shift+f11",
        "mac": "shift+f11",
        "when": "textInputFocus && editorLangId == markdown"
      },
      {
        "command": "fiction-writer.extension.toggleWritingAndZenMode",
        "key": "ctrl+f11",
        "mac": "cmd+f11",
        "when": "textInputFocus && editorLangId == markdown"
      }
    ],
    "grammars": [
      {
        "scopeName": "markdown.fiction",
        "path": "./grammars/fiction.markdown.tmGrammar.json",
        "injectTo": [
          "text.html.markdown"
        ]
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "webpack --mode production",
    "webpack": "webpack --mode development",
    "webpack-dev": "webpack --mode development --watch",
    "test-compile": "tsc -p ./",
    "run": "\"d:\\Microsoft VS Code\\Code.exe\" --extensionDevelopmentPath=\"e:\\Stuff\\fiction-writer\\vscode-fiction-writer\"",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test-int": "node ./out/test/integration/runTests.js",
    "test": "jest",
    "deploy": "vsce publish --yarn",
    "postversion": "git push --tags && git push",
    "release": "npm version patch"
  },
  "devDependencies": {
    "@types/glob": "^7.1.3",
    "@types/jest": "^26.0.20",
    "@types/js-yaml": "^4.0.0",
    "@types/mocha": "^8.2.1",
    "@types/node": "^12.11.7",
    "@types/vscode": "^1.52.0",
    "@typescript-eslint/eslint-plugin": "^4.9.0",
    "@typescript-eslint/parser": "^4.9.0",
    "eslint": "^7.15.0",
    "glob": "^7.1.6",
    "jest": "^26.6.3",
    "mocha": "^8.3.1",
    "ts-jest": "^26.5.3",
    "ts-loader": "^8.0.17",
    "typescript": "^4.1.2",
    "vsce": "^1.85.0",
    "vscode-test": "^1.4.1",
    "webpack": "^5.24.3",
    "webpack-cli": "^4.5.0"
  },
  "dependencies": {
    "js-yaml": "^4.0.0",
    "prune": "^0.0.2"
  }
}
